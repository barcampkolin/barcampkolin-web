.clearfix() {
    &:after, &:before {
        display: table;
        content: "";
        clear: both;
    }
}

.vertical-middle() {
    position: relative;
    top: 50%;
    .translate(0, -50%);
}

.tr() {
    .transition(all 250ms linear);
}

//---------------------------------------------------
//  LESS Prefixer
//---------------------------------------------------
//
//  All of the CSS3 fun, none of the prefixes!
//
//  As a rule, you can use the CSS properties you
//  would expect just by adding a '.':
//
//  box-shadow => .box-shadow(@args)
//
//  Also, when shorthand is available, arguments are
//  not parameterized. Learn CSS, not LESS Prefixer.
//
//  -------------------------------------------------
//  TABLE OF CONTENTS
//  (*) denotes a syntax-sugar helper
//  -------------------------------------------------
//
//      .animation(@args)
//          .animation-delay(@delay)
//          .animation-direction(@direction)
//          .animation-duration(@duration)
//          .animation-fill-mode(@mode)
//          .animation-iteration-count(@count)
//          .animation-name(@name)
//          .animation-play-state(@state)
//          .animation-timing-function(@function)
//      .background-size(@args)
//      .border-radius(@args)
//      .box-shadow(@args)
//          .inner-shadow(@args) *
//      .box-sizing(@args)
//          .border-box() *
//          .content-box() *
//      .columns(@args)
//          .column-count(@count)
//          .column-gap(@gap)
//          .column-rule(@args)
//          .column-width(@width)
//      .gradient(@default,@start,@stop) *
//          .linear-gradient-top(@default,@color1,@stop1,@color2,@stop2,[@color3,@stop3,@color4,@stop4])*
//          .linear-gradient-left(@default,@color1,@stop1,@color2,@stop2,[@color3,@stop3,@color4,@stop4])*
//      .keyframes(@name; @args)
//      .opacity(@factor)
//      .transform(@args)
//          .transform-origin(@args)
//          .transform-style(@style)
//          .rotate(@deg)
//          .scale(@factor)
//          .translate(@x,@y)
//          .translate3d(@x,@y,@z)
//          .translateHardware(@x,@y) *
//      .text-shadow(@args)
//      .transition(@args)
//          .transition-delay(@delay)
//          .transition-duration(@duration)
//          .transition-property(@property)
//          .transition-timing-function(@function)
//      Flexbox:
//          .flex-block()
//          .flex-inline()
//              .flex-flow(@direction: row, @wrap: nowrap)
//                  .flex-direction(@direction: row)
//                  .flex-wrap(@wrap: nowrap)
//              .justify-content(@justification)
//              .align-items(@mode)
//              .align-content(@alignment)
//              .flex(@args: none)
//                  .flex-grow(@grow: 1)
//                  .flex-shrink(@shrink: 1)
//                  .flex-basis(@basis: auto)
//              .order(@num: 0)
//              .align-self(@align: auto)
//
//  Credit to LESS Elements for the motivation and
//  to CSS3Please.com for implementation.
//
//  Copyright (c) 2012 Joel Sutherland
//  MIT Licensed:
//  http://www.opensource.org/licenses/mit-license.php
//
//---------------------------------------------------


// Animation

.animation(@args) {
    animation: @args;
}

.animation-delay(@delay) {
    animation-delay: @delay;
}

.animation-direction(@direction) {
    animation-direction: @direction;
}

.animation-duration(@duration) {
    animation-duration: @duration;
}

.animation-fill-mode(@mode) {
    animation-fill-mode: @mode;
}

.animation-iteration-count(@count) {
    animation-iteration-count: @count;
}

.animation-name(@name) {
    animation-name: @name;
}

.animation-play-state(@state) {
    animation-play-state: @state;
}

.animation-timing-function(@function) {
    animation-timing-function: @function;
}


// Background Size

.background-size(@args) {
    background-size: @args;
}


// Border Radius

.border-radius(@args) {
    border-radius: @args;
    background-clip: padding-box;
}


// Box Shadows
.box-shadow(@args) {
    box-shadow: @args;
}

.inner-shadow(@args) {
    .box-shadow(inset @args);
}


// Box Sizing

.box-sizing(@args) {
    box-sizing: @args;
}

.border-box() {
    .box-sizing(border-box);
}

.content-box() {
    .box-sizing(content-box);
}


// Columns

.columns(@args) {
    -webkit-columns: @args;
    -moz-columns: @args;
    columns: @args;
}

.column-count(@count) {
    column-count: @count;
}

.column-gap(@gap) {
    column-gap: @gap;
}

.column-width(@width) {
    column-width: @width;
}

.column-rule(@args) {
    column-rule: @args;
}


// Gradients

.gradient(@default: #F5F5F5, @start: #EEE, @stop: #FFF) {
    .linear-gradient-top(@default, @start, 0%, @stop, 100%);
}

.linear-gradient-top(@default,@color1,@stop1,@color2,@stop2) {
    background-color: @default;
    background-image: linear-gradient(top, @color1 @stop1, @color2 @stop2);
}

.linear-gradient-top(@default,@color1,@stop1,@color2,@stop2,@color3,@stop3) {
    background-color: @default;
    background-image: linear-gradient(top, @color1 @stop1, @color2 @stop2, @color3 @stop3);
}

.linear-gradient-top(@default,@color1,@stop1,@color2,@stop2,@color3,@stop3,@color4,@stop4) {
    background-color: @default;
    background-image: linear-gradient(top, @color1 @stop1, @color2 @stop2, @color3 @stop3, @color4 @stop4);
}

.linear-gradient-left(@default,@color1,@stop1,@color2,@stop2) {
    background-color: @default;
    background-image: linear-gradient(left, @color1 @stop1, @color2 @stop2);
}

.linear-gradient-left(@default,@color1,@stop1,@color2,@stop2,@color3,@stop3) {
    background-color: @default;
    background-image: linear-gradient(left, @color1 @stop1, @color2 @stop2, @color3 @stop3);
}

.linear-gradient-left(@default,@color1,@stop1,@color2,@stop2,@color3,@stop3,@color4,@stop4) {
    background-color: @default;
    background-image: linear-gradient(left, @color1 @stop1, @color2 @stop2, @color3 @stop3, @color4 @stop4);
}


// Opacity

.opacity(@factor) {
    opacity: @factor;
}

// Key Frames
.keyframes(@name; @args) {
    @-moz-keyframes @name { @args();
    }
    @-webkit-keyframes @name { @args();
    }
    @keyframes @name { @args();
    }
}


// Text Shadow

.text-shadow(@args) {
    text-shadow: @args;
}


// Transforms

.transform(@args) {
    transform: @args;
}

.transform-origin(@args) {
    transform-origin: @args;
}

.transform-style(@style) {
    transform-style: @style;
}

.rotate(@deg:45deg) {
    .transform(rotate(@deg));
}

.scale(@factor:.5) {
    .transform(scale(@factor));
}

.translate(@x,@y) {
    .transform(translate(@x, @y));
}

.translate3d(@x,@y,@z) {
    .transform(translate3d(@x, @y, @z));
}

.translateHardware(@x,@y) {
    .translate(@x, @y);
    transform: translate3d(@x, @y, 0);
}


// Transitions

.transition(@args:200ms) {
    transition: @args;
}

.transition-delay(@delay:0) {
    transition-delay: @delay;
}

.transition-duration(@duration:200ms) {
    transition-duration: @duration;
}

.transition-property(@prop:all) {
    transition-property: @prop;
}

.transition-timing-function(@function:ease) {
    transition-timing-function: @function;
}

// Flexbox
.flex-block() {
    display: flex;
}

.flex-inline() {
    display: inline-flex;
}

.flex-flow(@direction: row, @wrap: nowrap) {
    flex-flow: @direction @wrap;
}

.align-content(@alignment) {
    align-content: @alignment;
}

.flex-direction(@direction: row) {
    flex-direction: @direction;
}

.flex-wrap(@wrap: nowrap) {
    flex-wrap: @wrap;
}

.justify-content(@justification) {
    justify-content: @justification;
}

.align-items(@mode) {
    align-items: @mode;
}

.flex(@args: none) {
    flex: @args;

}

.order(@order: 0) {
    order: @order;
}

.flex-grow(@grow: 1) {
    flex-grow: @grow;
}

.flex-shrink(@shrink: 1) {
    flex-shrink: @shrink;
}

.flex-basis(@basis: auto) {
    flex-basis: @basis;
}

.align-self(@align: auto) {
    align-self: @align;
}
